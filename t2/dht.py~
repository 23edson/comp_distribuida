from bottle import run, get, put, request
import requests
import json
import sys
from hashlib import md5

MOD = 3
NO_ERROR = 200
PROTOCOL = "http://"
# BUGLIST
# - insercao da mesma chave 2 vezes, possibilita inserir o mesmo par de chave/valer em posicoes diferentes da DHT
# - necessario cria uma maneira para inicializar a DHT, a partir de uma chave inicial
# - necessario implementar comunicacao em grupo, e propagar os inserts e lookups

def hashFunction(key):
    out = md5(key.encode('utf-8')).hexdigest()
    out_1 = '\0'
    for character in out:
        out_1 = str(out_1) + str(ord(character)%MOD)
    return out_1

def subkeys(k):
    for i in range(len(k), 0, -1):
        yield k[:i]
    yield ""


class DHT:
    def __init__(self, k):
        self.k = k
        self.h = {}

        for sk in subkeys(self.k):
            self.h[sk] = None
            
    def insertPropagate(self,k,v,kaux,vaux):
        data = '\0'
        flag = 0
        #if not v.find("localhost:"):
         #   print("ooo")
          #  return None
        #print("ok")
        for i,c in enumerate(str(v)):
            if c == '/':
                flag = flag + 1
            elif flag == 2:
                data = data + c

        url = str(vaux) + '/dht/' + str(k) + '/' + data
        try:
            req = requests.put(url)
            if req.status_code == NO_ERROR:
                return vaux
        except requests.exceptions.RequestException as e:
            print(e)
            return None
    
    def insert(self, k, v):
        for sk in subkeys(k):
            if sk in self.h:
                if not self.h[sk]:
                    self.h[sk] = (k, v)
                    print("aqqqq")
                    return sk
                else:
                    (kaux,vaux) = self.h[sk]
                    print("problem")
                    if self.insertPropagate(k,v,kaux,vaux):
                        return vaux
                    return None
                    
        
        
    #def lookup(self, k):
     #   print(list(subkeys(k)))
      #  for sk in subkeys(k):
       #     print(sk)
        #    print(self.h)
         #   if sk in self.h:
          #      if self.h[sk]:
           #         (ki, vi) = self.h[sk]
            #        if ki == k:
             #           return vi
        #return None
    def lookup(self,k):
         keys = []
         #find = 1
         
         print(list(subkeys(k)))
         for sk in subkeys(k):
             print(sk)
             print(self.h)
             if sk in self.h:
                 if self.h[sk]:
                     (ki, vi) = self.h[sk]
                     if ki == k:
                         keys.append([1,vi,len(sk)])
                         return keys
                     else:
                         keys.append([0,vi,len(sk)])
                         return keys
                    

    def lookup_dist(self,k):
        find = self.lookup(k)
        (s,t,v) = find
        if s:
            return find

        while True:
            try:
                req = requests.get(find[1] + '/dht/lookup/' + k)
                if req.status_code == NO_ERROR:
                    data = json.loads(req.text)
                    (s1,t1,v1) = data
                    if s1:
                        return data
                    elif v1 > v:
                        t = t1
                        v = v1
                    else:
                        print("Key not found")
                        return None
            except requests.exceptions.RequestException as e:
                print(e)
                return None

    def __repr__(self):
        return "<<DHT:"+ repr(self.h) +">>"

#dht = DHT("abcd")

@get('/dht/lookup/<key>')
def dht_lookup(key):
    global dht
    #global PROTOCOL
    return json.dumps(dht.lookup(key))

@get('/dht/lookup_dist/<key>')
def dht_lookup_dist(key):
    global dht
    #global PROTOCOL
    return json.dumps(dht.lookup_dist(key))

@put('/dht/<key>/<value>')
def dht_insert(key, value):
    global dht
    
    
    return json.dumps(dht.insert(key, value))

valor = hashFunction("http://localhost:"+ str(sys.argv[1]))
dht = DHT(valor)
#print("DHT : " + valor)
#Inicializa o servidor em uma porta x
run(host='localhost', port=int(sys.argv[1]))
